[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2022-08-30 09:55:15.075777",
  "module": null,
  "name": "Item-Form",
  "script": "frappe.ui.form.on('Item', {\n\tbefore_save(frm) {\n\t\t// your code here\n\t\tfrm.set_value('trading_item_flp',cur_frm.doc.processing_amount + cur_frm.doc.po_amount)\n\t\tfrm.refresh_field('trading_item_flp');\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2022-11-03 16:50:03.303791",
  "module": null,
  "name": "Purchase Order-Form",
  "script": "frappe.ui.form.on('Purchase Order', {\n    \n\ton_submit(frm) {\n\t\t// your code here\n\t\tlet a =frm.doc.items \n        for (let i in a){\n            const iterator = a[i];\n            // console.log(iterator.item_code)\n            \n            \n            let processing_amount = 0\n            frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        'doctype': 'Item',\n                        'filters': {'name': iterator.item_code},\n                        'fieldname': ['processing_amount']\n                     },\n                    async: false,\n                    callback: function(r) {\n                        if (!r.exc) {\n                            // code snippet\n                            processing_amount = r.message.processing_amount\n                            console.log(r.message.processing_amount)\n\n                        }\n                    }\n                });\n            \n            // console.log(po_amount)\n            // console.log(processing_amount)\n            \n            frappe.db.set_value('Item',iterator.item_code, {\n                    po_amount: iterator.rate,\n                    trading_item_flp :iterator.rate + processing_amount\n                }).then(r => {\n                    let doc = r.message;\n                    console.log(doc);\n                })\n\n            \n        }\n\t\t\n\t\t\n\t\t\n\t}\n\t\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pick List",
  "enabled": 0,
  "modified": "2022-11-16 13:03:23.414104",
  "module": null,
  "name": "Pick List-Form",
  "script": "\n\nfrappe.ui.form.on('Pick List', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n\n})\n\nfrappe.ui.form.on('Pick List Item', {\n\tpick_batch_no: function(frm, cdt, cdn) {\n\t\tvar me = locals[cdt][cdn]\n\t\tconsole.log(me)\n\n\t\tlet d = new frappe.ui.Dialog({\n\t\t\ttitle: 'Enter details',\n\t\t\tfields: [{\n\t\t\t\t\tfieldname: 'item_code',\n\t\t\t\t\tread_only: 1,\n\t\t\t\t\tfieldtype: 'Link',\n\t\t\t\t\toptions: 'Item',\n\t\t\t\t\tlabel: __('Item Code'),\n\t\t\t\t\tdefault: me.item_code\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldname: 'warehouse',\n\t\t\t\t\tfieldtype: 'Link',\n\t\t\t\t\toptions: 'Warehouse',\n\t\t\t\t\treqd: me.has_batch && !me.has_serial_no ? 0 : 1,\n\t\t\t\t\tlabel: __('Warehouse'),\n\t\t\t\t\tdefault: typeof me.warehouse == \"string\" ? me.warehouse : '',\n\t\t\t\t\tonchange: function(e) {\n\t\t\t\t\t\tme.warehouse = this.get_value();\n\t\t\t\t\t\tlet qty_field = d.fields_dict.qty;\n\t\t\t\t\t\tlet total_qty = 0;\n\n\t\t\t\t\t\td.fields_dict.batches.df.data.forEach(data => {\n\t\t\t\t\t\t\ttotal_qty += flt(data.selected_qty);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tqty_field.set_input(total_qty);\n\n\n\t\t\t\t\t\tvar batches = this.layout.fields_dict.batches;\n\t\t\t\t\t\tif (batches) {\n\t\t\t\t\t\t\tbatches.grid.df.data = [];\n\t\t\t\t\t\t\tbatches.grid.refresh();\n\t\t\t\t\t\t\tbatches.grid.add_new_row(null, null, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget_query: function() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tquery: \"erpnext.controllers.queries.warehouse_query\",\n\t\t\t\t\t\t\tfilters: [\n\t\t\t\t\t\t\t\t[\"Bin\", \"item_code\", \"=\", me.item_code],\n\t\t\t\t\t\t\t\t[\"Warehouse\", \"is_group\", \"=\", 0],\n\t\t\t\t\t\t\t\t[\"Warehouse\", \"company\", \"=\", frm.doc.company]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: 'Column Break'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldname: 'qty',\n\t\t\t\t\tfieldtype: 'Float',\n\t\t\t\t\tread_only: me.has_batch && !me.has_serial_no,\n\t\t\t\t\tlabel: __(me.has_batch && !me.has_serial_no ? 'Selected Qty' : 'Qty'),\n\t\t\t\t\tdefault: flt(me.stock_qty) || flt(me.picked_qty),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldname: 'uom',\n\t\t\t\t\tread_only: 1,\n\t\t\t\t\tfieldtype: 'Link',\n\t\t\t\t\toptions: 'UOM',\n\t\t\t\t\tlabel: __('UOM'),\n\t\t\t\t\tdefault: me.uom\n\t\t\t\t},\n\n\n\t\t\t\t{\n\t\t\t\t\tfieldtype: 'Section Break',\n\t\t\t\t\tlabel: __('Batches')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldname: 'batches',\n\t\t\t\t\tfieldtype: 'Table',\n\t\t\t\t\tlabel: __('Batch Entries'),\n\t\t\t\t\tfields: [{\n\t\t\t\t\t\t\t'fieldtype': 'Link',\n\t\t\t\t\t\t\t'read_only': 0,\n\t\t\t\t\t\t\t'fieldname': 'batch_no',\n\t\t\t\t\t\t\t'options': 'Batch',\n\t\t\t\t\t\t\t'label': __('Select Batch'),\n\t\t\t\t\t\t\t'in_list_view': 1,\n\t\t\t\t\t\t\tget_query: function() {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tfilters: {\n\t\t\t\t\t\t\t\t\t\titem_code: me.item_code,\n\t\t\t\t\t\t\t\t\t\twarehouse: me.warehouse || typeof me.warehouse == \"string\" ? me.warehouse : ''\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tquery: 'erpnext.controllers.queries.get_batch_no'\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tchange: function() {\n\t\t\t\t\t\t\t\tconst batch_no = this.get_value();\n\t\t\t\t\t\t\t\tif (!batch_no) {\n\t\t\t\t\t\t\t\t\tthis.grid_row.on_grid_fields_dict\n\t\t\t\t\t\t\t\t\t\t.available_qty.set_value(0);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet selected_batches = this.grid.grid_rows.map((row) => {\n\t\t\t\t\t\t\t\t\tif (row === this.grid_row) {\n\t\t\t\t\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (row.on_grid_fields_dict.batch_no) {\n\t\t\t\t\t\t\t\t\t\treturn row.on_grid_fields_dict.batch_no.get_value();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (selected_batches.includes(batch_no)) {\n\t\t\t\t\t\t\t\t\tthis.set_value(\"\");\n\t\t\t\t\t\t\t\t\tfrappe.throw(__('Batch {0} already selected.', [batch_no]));\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (me.warehouse) {\n\t\t\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\t\t\tmethod: 'erpnext.stock.doctype.batch.batch.get_batch_qty',\n\t\t\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\t\t\tbatch_no,\n\t\t\t\t\t\t\t\t\t\t\twarehouse: me.warehouse,\n\t\t\t\t\t\t\t\t\t\t\titem_code: me.item_code\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tcallback: (r) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.grid_row.on_grid_fields_dict\n\t\t\t\t\t\t\t\t\t\t\t\t.available_qty.set_value(r.message || 0);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.set_value(\"\");\n\t\t\t\t\t\t\t\t\tfrappe.throw(__('Please select a warehouse to get available quantities'));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// e.stopImmediatePropagation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'fieldtype': 'Float',\n\t\t\t\t\t\t\t'read_only': 1,\n\t\t\t\t\t\t\t'fieldname': 'available_qty',\n\t\t\t\t\t\t\t'label': __('Available'),\n\t\t\t\t\t\t\t'in_list_view': 1,\n\t\t\t\t\t\t\t'default': 0,\n\t\t\t\t\t\t\tchange: function() {\n\t\t\t\t\t\t\t\tthis.grid_row.on_grid_fields_dict.selected_qty.set_value('0');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'fieldtype': 'Float',\n\t\t\t\t\t\t\t'read_only': 0,\n\t\t\t\t\t\t\t'fieldname': 'selected_qty',\n\t\t\t\t\t\t\t'label': __('Qty'),\n\t\t\t\t\t\t\t'in_list_view': 1,\n\t\t\t\t\t\t\t'default': 0,\n\t\t\t\t\t\t\tchange: function() {\n\t\t\t\t\t\t\t\tvar batch_no = this.grid_row.on_grid_fields_dict.batch_no.get_value();\n\t\t\t\t\t\t\t\tvar available_qty = this.grid_row.on_grid_fields_dict.available_qty.get_value();\n\t\t\t\t\t\t\t\tvar selected_qty = this.grid_row.on_grid_fields_dict.selected_qty.get_value();\n\n\t\t\t\t\t\t\t\tif (batch_no.length === 0 && parseInt(selected_qty) !== 0) {\n\t\t\t\t\t\t\t\t\tfrappe.throw(__(\"Please select a batch\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (parseFloat(available_qty) < parseFloat(selected_qty)) {\n\n\t\t\t\t\t\t\t\t\tthis.set_value('0');\n\t\t\t\t\t\t\t\t\tfrappe.throw(__('For transfer from source, selected quantity cannot be greater than available quantity'));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.grid.refresh();\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlet qty_field = d.fields_dict.qty;\n\t\t\t\t\t\t\t\tlet total_qty = 0;\n\n\t\t\t\t\t\t\t\td.fields_dict.batches.df.data.forEach(data => {\n\t\t\t\t\t\t\t\t\ttotal_qty += flt(data.selected_qty);\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tqty_field.set_input(total_qty);\n\n\n\n\n\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tin_place_edit: true,\n\t\t\t\t}\n\n\t\t\t],\n\t\t\tprimary_action_label: 'Insert',\n\t\t\tprimary_action(values) {\n\t\t\t\tconsole.log(values);\n\t\t\t\tfrappe.run_serially([\n\t\t\t\t\t() => {\n\t\t\t\t\t\tvalues.batches.map((batch, i) => {\n\t\t\t\t\t\t\tlet batch_no = batch.batch_no;\n\t\t\t\t\t\t\tlet row = '';\n\n\t\t\t\t\t\n\t\t\t\t\t\t\trow = frm.add_child(\"locations\", {\n\t\t\t\t\t\t\t        'item_code':values.item_code,\n\t\t\t\t\t\t\t        'qty':batch.selected_qty,\n\t\t\t\t\t\t\t        'stock_qty':batch.selected_qty,\n\t\t\t\t\t\t\t        'batch_no':batch_no,\n\t\t\t\t\t\t\t        'warehouse':values.warehouse\n\t\t\t\t\t\t\t    \n\t\t\t\t\t\t\t        })\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t    \n\t\t\t\t\t\tcur_frm.refresh_field(\"locations\");\n\t\t\t\t// \t\trefresh_field(\"packed_items\");\n\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t    d.hide()\n\t    \t\t\t\tfrappe.model.remove_from_locals(me.doctype,me.name)\t\n\n\t\t\t\t\t\tcur_frm.refresh_field(\"locations\");\n\n\t\t\t\t\t}\n\n\n\t\t\t\t])\n\n\t\t\t\t// d.hide();\n\t\t\t\t// cur_frm.refresh_field(\"locations\");\n\n\t\t\t}\n\n\n\t\t});\n\t\t\t\t\t\t\t\t// \t\tcur_frm.refresh_field(\"locations\");\n\n\t\td.show();\n\t\t\t\t// \t\tcur_frm.refresh_field(\"locations\");\n\n\t}\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2022-11-17 17:43:04.000190",
  "module": null,
  "name": "Quotation-Form",
  "script": "frappe.ui.form.on('Quotation', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\n\n\n\nfrappe.ui.form.on('Quotation Item', \"item_code\", function(frm, cdt, cdn) {\n\t// locals[cdt][cdn]['product']\n\n\tvar ItemGroup = 0.00\n\tvar Item = 0.00\n\tvar Customer = 0.00\n\tvar TotalCost = 0.00\n\tvar RMC = 0.00\n\n\tvar Totalper = 0.00\n\tvar TotalValue = 0.00\n\n\n\t// getting percentage item\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'Item',\n\t\t\t'filters': {\n\t\t\t\t'name': locals[cdt][cdn]['item_code']\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'percentage',\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.percentage) {\n\t\t\t\t\tItem = r.message.percentage\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// getting percentage item item_group\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'Item Group',\n\t\t\t'filters': {\n\t\t\t\t'name': locals[cdt][cdn]['item_group']\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'percentage',\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.percentage) {\n\t\t\t\t\tItemGroup = r.message.percentage\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// getting percentage item Customer\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'Customer',\n\t\t\t'filters': {\n\t\t\t\t'name': frm.doc.party_name\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'percentage',\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.percentage) {\n\t\t\t\t\tCustomer = r.message.percentage\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// getting percentage item Bom\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'BOM',\n\t\t\t'filters': {\n\t\t\t\t'item': locals[cdt][cdn]['item_code'],\n\t\t\t\t\"is_default\": 1\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'raw_material_cost',\n\t\t\t\t'total_cost',\n                'electricity_per_unit',\n                'total_overheads',\n                \"quantity\"\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.raw_material_cost) {\n\t\t\t\t\tRMC = r.message.raw_material_cost / r.message.quantity\n\t\t\t\t\tTotalCost = RMC + r.message.electricity_per_unit + r.message.total_overheads\n\n\t\t\t\t}else \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\t\t\t\t'doctype': 'Item',\n\t\t\t\t\t\t\t\t\t\t\t\t'filters': {\n\t\t\t\t\t\t\t\t\t\t\t\t\t'name': locals[cdt][cdn]['item_code']\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t'fieldname': [\n\t\t\t\t\t\t\t\t\t\t\t\t\t'trading_item_flp',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'po_amount'\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tasync: false,\n\t\t\t\t\t\t\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// code snippet\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (r.message.trading_item_flp) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTotalCost = r.message.trading_item_flp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRMC = r.message.po_amount\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t});\n\n\n\n\tif (isNaN(ItemGroup) == false && isNaN(Item) == false && isNaN(Customer) == false && isNaN(TotalCost) == false && isNaN(RMC) == false) {\n\t\tTotalper = ItemGroup + Item + Customer\n\n\t\tTotalValue = (Totalper * TotalCost) / 100\n\n\t\tlocals[cdt][cdn]['rmc_'] = RMC.toFixed(2);\n\t\tlocals[cdt][cdn]['flp_'] = TotalCost.toFixed(2);\n\t\tlocals[cdt][cdn]['ufp_'] = (TotalCost + TotalValue).toFixed(2);\n\n\n\n\t} else {\n\n\n\t}\n\n\n\n\n\tconsole.log(`______________`)\n\t// console.log(ItemGroup)\n\tconsole.log(`ItemGroup : ${ItemGroup}  `)\n\tconsole.log(`Item : ${Item}  `)\n\tconsole.log(`Customer : ${Customer}  `)\n\tconsole.log(`TotalCost : ${TotalCost}  `)\n\tconsole.log(`RMC : ${RMC}  `)\n\tconsole.log(`Totalper : ${Totalper}  `)\n\tconsole.log(`TotalValue : ${TotalValue}  `)\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2022-11-17 17:44:49.650105",
  "module": null,
  "name": "BOM-Form",
  "script": "frappe.ui.form.on('BOM', {\n\tvalidate(frm) {\n\t\t// your code here\n\t\tcur_frm.set_value('rmc_per_unit',cur_frm.doc.raw_material_cost / cur_frm.doc.quantity )\n\t\tcur_frm.refresh_field('rmc_per_unit')\n\t\t \n\t\tvar balance = 0\n\t\t\n\t\t$.each(frm.doc.electricity_table || [], function(i, v) {\n                frappe.model.set_value(v.doctype, v.name, \"unit_consumed\", v.end_unit - v.start_unit)\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {'doctype': 'Company', 'fieldname': [\"electricity_price\"],\"filters\": {'name': cur_frm.doc.company,} },\n                    async: false,\n                    callback: function(r) {\n                        if (!r.exc) {\n                            frappe.model.set_value(v.doctype, v.name, \"unit_price\", r.message.electricity_price)\n                        }\n                    }\n                });\n                \n                frappe.model.set_value(v.doctype, v.name, \"amount\", v.unit_price * v.unit_consumed)\n                balance += v.amount\n          })\n  \t\tcur_frm.set_value('electricity_per_unit',balance / cur_frm.doc.quantity )\n\t\tcur_frm.refresh_field('electricity_per_unit')\n\t\t\n\t\t\n\t\tvar total_overhead = 0\n        $.each(frm.doc.overheads_table,  function(i,  d) {\n            // calculate incentive\n            console.log( d.unit * (cur_frm.doc.rmc_per_unit /100))\n            frappe.model.set_value(d.doctype, d.name, \"overhead_amount\", d.unit * (cur_frm.doc.raw_material_cost /100))\n\n            total_overhead += d.overhead_amount\n            \n        });\n  \t\tcur_frm.set_value('total_overheads',total_overhead/  cur_frm.doc.quantity )\n\t\tcur_frm.refresh_field('total_overheads')\n          \n\t}\n})\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Landed Cost Voucher",
  "enabled": 1,
  "modified": "2023-01-13 11:19:16.453557",
  "module": null,
  "name": "Landed Cost Voucher-Form",
  "script": "frappe.ui.form.on('Landed Cost Voucher', {\nbefore_save: function(frm) {\n\t\tfrm.doc.items.forEach(i=>{\n\t\t    i.rate_par_unit = (i.amount + i.applicable_charges)/i.qty\n\t\t })\n\t\tfrm.refresh_fields(\"items\");\n\t\t\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2023-03-06 15:27:00.931431",
  "module": null,
  "name": "Delivery Note-Form",
  "script": "frappe.ui.form.on('Delivery Note', {\ntare_weight(frm){\n    frm.set_value(\"total_gross\", frm.doc.net_weight + frm.doc.tare_weight) ;\n\n   }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2022-12-14 10:52:36.113805",
  "module": null,
  "name": "Stock Entry-Form",
  "script": "frappe.ui.form.on('Stock Entry', {\n\tonload_post_render(frm) {\n\t\t// your code here\n\n\t\tif (cur_frm.doc.from_bom == 1 && cur_frm.doc.purpose == 'Manufacture' && cur_frm.doc.bom_no !== undefined && frm.is_new()) {\n\t\t\t// electric\n\t\t\tvar balancwwe = 0\n\n\t\t\tvar elec = frappe.model.get_children('BOM', cur_frm.doc.bom_no, 'electricity_table')\n\t\t\tfor (let i = 0; i < elec.length; i++) {\n\t\t\t\tconst iter = elec[i]\n\t\t\t\tfrm.add_child('electricity_table', {\n\t\t\t\t\tstart_unit: iter.start_unit,\n\t\t\t\t\tend_unit: iter.end_unit,\n\t\t\t\t\tunit_consumed: iter.unit_consumed,\n\t\t\t\t\tunit_price: iter.unit_price,\n\t\t\t\t\tamount: iter.amount\n\t\t\t\t});\n\t\t\t\tbalancwwe += iter.amount\n\n\t\t\t}\n\t\t\tfrm.refresh_field('electricity_table');\n\n\t\t\tcur_frm.set_value('electricity_per_unit', balancwwe / cur_frm.doc.fg_completed_qty)\n\t\t\tcur_frm.refresh_field('electricity_per_unit')\n\n\t\t\t//overhead\n\t\t\tvar total_overheasd = 0\n\n\t\t\tvar overhead = frappe.model.get_children('BOM', cur_frm.doc.bom_no, 'overheads_table')\n\t\t\tfor (let i = 0; i < overhead.length; i++) {\n\t\t\t\tconst iters = overhead[i]\n\t\t\t\tfrm.add_child('overheads_table', {\n\t\t\t\t\toverhead_type: iters.overhead_type,\n\t\t\t\t\tunit: iters.unit,\n\t\t\t\t\toverhead_amount: iters.overhead_amount,\n\t\t\t\t});\n\t\t\t\ttotal_overheasd += iters.overhead_amount\n\t\t\t}\n\t\t\tfrm.refresh_field('overheads_table');\n\t\t\tcur_frm.set_value('total_overheads', total_overheasd)\n\t\t\tcur_frm.refresh_field('total_overheads')\n\t\t}\n\n\n\t},\n\n\twork_order(frm) {\n\t\t// your code here\n\n\t\tif (cur_frm.doc.from_bom == 1 && cur_frm.doc.purpose == 'Manufacture' && cur_frm.doc.bom_no !== undefined) {\n\t\t\t// electric\n\t\t\tcur_frm.clear_table(\"electricity_table\")\n\t\t\tfrm.refresh_field('electricity_table');\n\t\t\tcur_frm.clear_table(\"overheads_table\")\n\t\t\tfrm.refresh_field('overheads_table');\n\n\n\t\t\tvar balancwwe = 0\n\t\t\t// \t\t\tcur_frm.clear_table(\"electricity_table\")\n\n\t\t\tvar elec = frappe.model.get_children('BOM', cur_frm.doc.bom_no, 'electricity_table')\n\t\t\tfor (let i = 0; i < elec.length; i++) {\n\t\t\t\tconst iter = elec[i]\n\t\t\t\tfrm.add_child('electricity_table', {\n\t\t\t\t\tstart_unit: iter.start_unit,\n\t\t\t\t\tend_unit: iter.end_unit,\n\t\t\t\t\tunit_consumed: iter.unit_consumed,\n\t\t\t\t\tunit_price: iter.unit_price,\n\t\t\t\t\tamount: iter.amount\n\t\t\t\t});\n\t\t\t\tbalancwwe += iter.amount\n\n\t\t\t}\n\t\t\tfrm.refresh_field('electricity_table');\n\n\t\t\tcur_frm.set_value('electricity_per_unit', balancwwe / cur_frm.doc.fg_completed_qty)\n\t\t\tcur_frm.refresh_field('electricity_per_unit')\n\n\t\t\t//overhead\n\t\t\tvar total_overheasd = 0\n\t\t\t// \t\t\tcur_frm.clear_table(\"overheads_table\")\n\n\t\t\tvar overhead = frappe.model.get_children('BOM', cur_frm.doc.bom_no, 'overheads_table')\n\t\t\tfor (let i = 0; i < overhead.length; i++) {\n\t\t\t\tconst iters = overhead[i]\n\t\t\t\tfrm.add_child('overheads_table', {\n\t\t\t\t\toverhead_type: iters.overhead_type,\n\t\t\t\t\tunit: iters.unit,\n\t\t\t\t\toverhead_amount: iters.overhead_amount,\n\t\t\t\t});\n\t\t\t\ttotal_overheasd += iters.overhead_amount\n\t\t\t}\n\t\t\tfrm.refresh_field('overheads_table');\n\t\t\tcur_frm.set_value('total_overheads', total_overheasd)\n\t\t\tcur_frm.refresh_field('total_overheads')\n\t\t}\n\n\n\t},\n\n\tbom_no(frm) {\n\t\t// your code here\n\n\t\tif (cur_frm.doc.from_bom == 1 && cur_frm.doc.purpose == 'Manufacture' && cur_frm.doc.bom_no !== undefined) {\n\t\t\t// electric\n\t\t\tcur_frm.clear_table(\"electricity_table\")\n\t\t\tfrm.refresh_field('electricity_table');\n\t\t\tcur_frm.clear_table(\"overheads_table\")\n\t\t\tfrm.refresh_field('overheads_table');\n\n\n\t\t\tvar balancwwe = 0\n\t\t\tvar elec = frappe.model.get_children('BOM', cur_frm.doc.bom_no, 'electricity_table')\n\t\t\tfor (let i = 0; i < elec.length; i++) {\n\t\t\t\tconst iter = elec[i]\n\t\t\t\tfrm.add_child('electricity_table', {\n\t\t\t\t\tstart_unit: iter.start_unit,\n\t\t\t\t\tend_unit: iter.end_unit,\n\t\t\t\t\tunit_consumed: iter.unit_consumed,\n\t\t\t\t\tunit_price: iter.unit_price,\n\t\t\t\t\tamount: iter.amount\n\t\t\t\t});\n\t\t\t\tbalancwwe += iter.amount\n\n\t\t\t}\n\t\t\tfrm.refresh_field('electricity_table');\n\n\t\t\tcur_frm.set_value('electricity_per_unit', balancwwe / cur_frm.doc.fg_completed_qty)\n\t\t\tcur_frm.refresh_field('electricity_per_unit')\n\n\t\t\t//overhead\n\t\t\tvar total_overheasd = 0\n\t\t\t// \t\t\tcur_frm.clear_table(\"overheads_table\")\n\n\t\t\tvar overhead = frappe.model.get_children('BOM', cur_frm.doc.bom_no, 'overheads_table')\n\t\t\tfor (let i = 0; i < overhead.length; i++) {\n\t\t\t\tconst iters = overhead[i]\n\t\t\t\tfrm.add_child('overheads_table', {\n\t\t\t\t\toverhead_type: iters.overhead_type,\n\t\t\t\t\tunit: iters.unit,\n\t\t\t\t\toverhead_amount: iters.overhead_amount,\n\t\t\t\t});\n\t\t\t\ttotal_overheasd += iters.overhead_amount\n\t\t\t}\n\t\t\tfrm.refresh_field('overheads_table');\n\t\t\tcur_frm.set_value('total_overheads', total_overheasd)\n\t\t\tcur_frm.refresh_field('total_overheads')\n\t\t}\n\n\n\t},\n\n\tvalidate(frm) {\n\t\tvar balance = 0\n\t\tvar is_finished_goods = 0\n\t\tvar is_not_finished_goods = 0\n\n\t\t$.each(frm.doc.items, function(i, v) {\n\t\t\t\tif (v.is_finished_item == 1) {\n\t\t\t\t\tis_finished_goods += v.qty\n\t\t\t\t} else {\n\t\t\t\t\tis_not_finished_goods += v.qty\n\t\t\t\t}\n\t\t\t})\n\n\n\t\t$.each(frm.doc.electricity_table || [], function(i, v) {\n\t\t\tfrappe.model.set_value(v.doctype, v.name, \"unit_consumed\", v.end_unit - v.start_unit)\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\targs: {\n\t\t\t\t\t'doctype': 'Company',\n\t\t\t\t\t'fieldname': [\"electricity_price\"],\n\t\t\t\t\t\"filters\": {\n\t\t\t\t\t\t'name': cur_frm.doc.company,\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tasync: false,\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\tfrappe.model.set_value(v.doctype, v.name, \"unit_price\", r.message.electricity_price)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tfrappe.model.set_value(v.doctype, v.name, \"amount\", v.unit_price * v.unit_consumed)\n\t\t\tbalance += v.amount\n\t\t}) \n\n\t\n\t\tif (cur_frm.doc.from_bom == 1) {\n\t\t\t\tcur_frm.set_value('electricity_per_unit', balance / cur_frm.doc.fg_completed_qty)\n\t\t\t} else {\n\t\t\t\tcur_frm.set_value('electricity_per_unit', balance / is_finished_goods)\n\t\t\t}\n\t\tcur_frm.refresh_field('electricity_per_unit')\n\n\n\t\tvar total_overhead = 0\n\t\t$.each(frm.doc.overheads_table, function(i, d) {\n\t\t\t// calculate incentive\n\t\t\tif (cur_frm.doc.from_bom == 1) {\n\t\t\t\tvar perunit = cur_frm.doc.total_outgoing_value / cur_frm.doc.fg_completed_qty\n\t\t\t} else {\n\t\t\t\tvar perunit = cur_frm.doc.total_outgoing_value / is_finished_goods\n\t\t\t}\n\n\t\t\tfrappe.model.set_value(d.doctype, d.name, \"overhead_amount\", perunit * (d.unit / 100))\n\n\t\t\ttotal_overhead += d.overhead_amount\n\t\t});\n\t\tcur_frm.set_value('total_overheads', total_overhead)\n\t\tcur_frm.refresh_field('total_overheads')\n\n\n\t},\n\tbefore_submit(frm) {\n\t\tif (cur_frm.doc.from_bom == 1 && cur_frm.doc.purpose == 'Manufacture') {\n\n\t\t\tfunction check_overhead_account(age) {\n\t\t\t\treturn age.description == 'overhead_account'\n\t\t\t}\n\n\n\t\t\tfunction check_electricity_table(age) {\n\t\t\t\treturn age.description == 'electricity_price'\n\t\t\t}\n\n\t\t\tconsole.log(frm.doc.additional_costs.some(check_overhead_account))\n\n\t\t\tvar ovtab = frm.doc.additional_costs.some(check_overhead_account)\n\n\n\t\t\tif (frm.doc.total_overheads > 0 && ovtab == false) {\n\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\t\targs: {\n\t\t\t\t\t\t'doctype': 'Company',\n\t\t\t\t\t\t'fieldname': [\"overhead_account\"],\n\t\t\t\t\t\t\"filters\": {\n\t\t\t\t\t\t\t'name': cur_frm.doc.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tasync: false,\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t\tvar perunit = cur_frm.doc.total_outgoing_value / cur_frm.doc.fg_completed_qty\n\n\t\t\t\t\t\t\tfrm.add_child('additional_costs', {\n\t\t\t\t\t\t\t\texpense_account: r.message.overhead_account,\n\t\t\t\t\t\t\t\tdescription: 'overhead_account',\n\t\t\t\t\t\t\t\tamount: frm.doc.total_overheads * cur_frm.doc.fg_completed_qty,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (ovtab == true) {\n\n\t\t\t\t$.each(frm.doc.additional_costs || [], function(i, v) {\n\t\t\t\t\tif (v.description == 'overhead_account') {\n\t\t\t\t\t\tfrappe.model.set_value(v.doctype, v.name, \"amount\", frm.doc.total_overheads)\n\t\t\t\t\t}\n\n\n\t\t\t\t})\n\t\t\t}\n\n\n\t\t\tconsole.log(frm.doc.additional_costs.some(check_electricity_table))\n\n\t\t\tvar ectab = frm.doc.additional_costs.some(check_electricity_table)\n\n\n\t\t\tif (cur_frm.doc.fg_completed_qty * cur_frm.doc.electricity_per_unit > 0 && ectab == false) {\n\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\t\targs: {\n\t\t\t\t\t\t'doctype': 'Company',\n\t\t\t\t\t\t'fieldname': [\"electricity_account\"],\n\t\t\t\t\t\t\"filters\": {\n\t\t\t\t\t\t\t'name': cur_frm.doc.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tasync: false,\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t\tfrm.add_child('additional_costs', {\n\t\t\t\t\t\t\t\texpense_account: r.message.electricity_account,\n\t\t\t\t\t\t\t\tdescription: 'electricity_price',\n\t\t\t\t\t\t\t\tamount: cur_frm.doc.fg_completed_qty * cur_frm.doc.electricity_per_unit,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (ectab == true) {\n\n\t\t\t\t$.each(frm.doc.additional_costs || [], function(i, v) {\n\t\t\t\t\tif (v.description == 'electricity_price') {\n\t\t\t\t\t\tfrappe.model.set_value(v.doctype, v.name, \"amount\", cur_frm.doc.fg_completed_qty * cur_frm.doc.electricity_per_unit)\n\t\t\t\t\t}\n\n\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tcur_frm.refresh_field('additional_costs')\n\n\t\t} else if (cur_frm.doc.from_bom == 0 && cur_frm.doc.purpose == 'Manufacture') {\n\t\t\tvar is_finished_goods = 0\n\t\t\tvar is_not_finished_goods = 0\n\n\t\t\t$.each(frm.doc.items, function(i, v) {\n\t\t\t\t\tif (v.is_finished_item == 1) {\n\t\t\t\t\t\tis_finished_goods += v.qty\n\t\t\t\t\t} else {\n\t\t\t\t\t\tis_not_finished_goods += v.qty\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tfunction check_overhead_account(age) {\n\t\t\t\t\treturn age.description == 'overhead_account'\n\t\t\t\t}\n\n\n\t\t\t\tfunction check_electricity_table(age) {\n\t\t\t\t\treturn age.description == 'electricity_price'\n\t\t\t\t}\n\n\t\t\t\tconsole.log(frm.doc.additional_costs.some(check_overhead_account))\n\n\t\t\t\tvar ovtab = frm.doc.additional_costs.some(check_overhead_account)\n\n\n\t\t\t\tif (frm.doc.total_overheads > 0 && ovtab == false) {\n\n\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t'doctype': 'Company',\n\t\t\t\t\t\t\t'fieldname': [\"overhead_account\"],\n\t\t\t\t\t\t\t\"filters\": {\n\t\t\t\t\t\t\t\t'name': cur_frm.doc.company,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tasync: false,\n\t\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t\t\tvar perunit = cur_frm.doc.total_outgoing_value / cur_frm.doc.fg_completed_qty\n\n\t\t\t\t\t\t\t\tfrm.add_child('additional_costs', {\n\t\t\t\t\t\t\t\t\texpense_account: r.message.overhead_account,\n\t\t\t\t\t\t\t\t\tdescription: 'overhead_account',\n\t\t\t\t\t\t\t\t\tamount: frm.doc.total_overheads * is_finished_goods\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else if (ovtab == true) {\n\n\t\t\t\t\t$.each(frm.doc.additional_costs || [], function(i, v) {\n\t\t\t\t\t\tif (v.description == 'overhead_account') {\n\t\t\t\t\t\t\tfrappe.model.set_value(v.doctype, v.name, \"amount\", frm.doc.total_overheads * is_finished_goods)\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t})\n\t\t\t\t}\n\n\n\t\t\t\tconsole.log(frm.doc.additional_costs.some(check_electricity_table))\n\n\t\t\t\tvar ectab = frm.doc.additional_costs.some(check_electricity_table)\n\n\n\t\t\t\tif (is_finished_goods * cur_frm.doc.electricity_per_unit > 0 && ectab == false) {\n\n\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t'doctype': 'Company',\n\t\t\t\t\t\t\t'fieldname': [\"electricity_account\"],\n\t\t\t\t\t\t\t\"filters\": {\n\t\t\t\t\t\t\t\t'name': cur_frm.doc.company,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tasync: false,\n\t\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t\t\tfrm.add_child('additional_costs', {\n\t\t\t\t\t\t\t\t\texpense_account: r.message.electricity_account,\n\t\t\t\t\t\t\t\t\tdescription: 'electricity_price',\n\t\t\t\t\t\t\t\t\tamount: cur_frm.doc.fg_completed_qty * is_finished_goods\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else if (ectab == true) {\n\n\t\t\t\t\t$.each(frm.doc.additional_costs || [], function(i, v) {\n\t\t\t\t\t\tif (v.description == 'electricity_price') {\n\t\t\t\t\t\t\tfrappe.model.set_value(v.doctype, v.name, \"amount\", is_finished_goods * cur_frm.doc.electricity_per_unit)\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tcur_frm.refresh_field('additional_costs')\n\n// \t\t\t});\n\n\n\n\n\t}\n\n\n\n\n\n}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-03-17 20:53:15.451081",
  "module": null,
  "name": "Sales Order-Form",
  "script": "frappe.ui.form.on('Sales Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t\n\n\t}\n})\n\nfrappe.ui.form.on('Sales Order Item', \"item_code\", function(frm, cdt, cdn) {\n    // locals[cdt][cdn]['product']\n\n\tvar ItemGroup = 0.00\n\tvar Item = 0.00\n\tvar Customer = 0.00\n\tvar TotalCost = 0.00\n\tvar RMC = 0.00\n\n\tvar Totalper = 0.00\n\tvar TotalValue = 0.00\n\n\n\t// getting percentage item\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'Item',\n\t\t\t'filters': {\n\t\t\t\t'name': locals[cdt][cdn]['item_code']\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'percentage',\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.percentage) {\n\t\t\t\t\tItem = r.message.percentage\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// getting percentage item item_group\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'Item Group',\n\t\t\t'filters': {\n\t\t\t\t'name': locals[cdt][cdn]['item_group']\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'percentage',\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.percentage) {\n\t\t\t\t\tItemGroup = r.message.percentage\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// getting percentage item Customer\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'Customer',\n\t\t\t'filters': {\n\t\t\t\t'name': frm.doc.party_name\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'percentage',\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.percentage) {\n\t\t\t\t\tCustomer = r.message.percentage\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// getting percentage item Bom\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'BOM',\n\t\t\t'filters': {\n\t\t\t\t'item': locals[cdt][cdn]['item_code'],\n\t\t\t\t\"is_default\": 1\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'raw_material_cost',\n\t\t\t\t'total_cost',\n                'electricity_per_unit',\n                'total_overheads',\n                \"quantity\"\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.raw_material_cost) {\n\t\t\t\t\tRMC = r.message.raw_material_cost / r.message.quantity\n\t\t\t\t\tTotalCost = RMC + r.message.electricity_per_unit + r.message.total_overheads\n\n\t\t\t\t}else \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\t\t\t\t'doctype': 'Item',\n\t\t\t\t\t\t\t\t\t\t\t\t'filters': {\n\t\t\t\t\t\t\t\t\t\t\t\t\t'name': locals[cdt][cdn]['item_code']\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t'fieldname': [\n\t\t\t\t\t\t\t\t\t\t\t\t\t'trading_item_flp',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'po_amount'\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tasync: false,\n\t\t\t\t\t\t\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// code snippet\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (r.message.trading_item_flp) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTotalCost = r.message.trading_item_flp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRMC = r.message.po_amount\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t});\n\n\n\n\tif (isNaN(ItemGroup) == false && isNaN(Item) == false && isNaN(Customer) == false && isNaN(TotalCost) == false && isNaN(RMC) == false) {\n\t\tTotalper = ItemGroup + Item + Customer\n\n\t\tTotalValue = (Totalper * TotalCost) / 100\n\n\t\tlocals[cdt][cdn]['rmc_'] = RMC.toFixed(2);\n\t\tlocals[cdt][cdn]['flp_'] = TotalCost.toFixed(2);\n\t\tlocals[cdt][cdn]['ufp_'] = (TotalCost + TotalValue).toFixed(2);\n\n\n\n\t} else {\n\n\n\t}\n\n\n\n\n// \tconsole.log(`______________`)\n// \t// console.log(ItemGroup)\n// \tconsole.log(`ItemGroup : ${ItemGroup}  `)\n// \tconsole.log(`Item : ${Item}  `)\n// \tconsole.log(`Customer : ${Customer}  `)\n// \tconsole.log(`TotalCost : ${TotalCost}  `)\n// \tconsole.log(`RMC : ${RMC}  `)\n// \tconsole.log(`Totalper : ${Totalper}  `)\n// \tconsole.log(`TotalValue : ${TotalValue}  `)\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-09-09 12:10:15.271132",
  "module": null,
  "name": "Customer-Form",
  "script": "frappe.ui.form.on('Customer', {\n\tonload(frm) {\n        frm.set_df_property(\"territory\", \"reqd\", 0);\n        frm.set_df_property(\"tax_category\", \"reqd\", 0);\n        frm.set_df_property(\"customer_group\", \"reqd\", 1);\n        frm.set_df_property(\"gst_category\", \"reqd\", 1);\n        frm.set_df_property(\"customer_category\", \"reqd\", 1);\n        frm.set_df_property(\"account_head_name\", \"reqd\", 1);\n        frm.set_df_property(\"i_poc_name\", \"reqd\", 1);\n        frm.set_df_property(\"customer_type\", \"reqd\", 1);\n        frm.set_df_property(\"territory\", \"reqd\", 1);\n        frm.set_df_property(\"customer_name\", \"reqd\", 1);\n        frm.set_df_property(\"gstin\", \"reqd\", 1);\n        frm.set_df_property(\"account_head\", \"reqd\", 1);\n        frm.set_df_property(\"account_manager\", \"reqd\", 1);\n        frm.set_df_property(\"payment_terms\", \"reqd\", 1);\n        frm.set_df_property(\"sales_team\", \"reqd\", 1);\n        }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2023-05-02 14:41:27.057681",
  "module": null,
  "name": "Purchase Invoice-Form",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\n\ton_submit(frm) {\n\t\t// your code here\n\t\tlet a = frm.doc.items\n\t\tfor (let i in a) {\n\t\t\tconst iterator = a[i];\n\t\t\t// console.log(iterator.item_code)\n\n\n\t\t\tlet processing_amount = 0\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\targs: {\n\t\t\t\t\t'doctype': 'Item',\n\t\t\t\t\t'filters': {\n\t\t\t\t\t\t'name': iterator.item_code\n\t\t\t\t\t},\n\t\t\t\t\t'fieldname': ['processing_amount']\n\t\t\t\t},\n\t\t\t\tasync: false,\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t// code snippet\n\t\t\t\t\t\tprocessing_amount = r.message.processing_amount\n\t\t\t\t\t\tconsole.log(r.message.processing_amount)\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// console.log(po_amount)\n\t\t\t// console.log(processing_amount)\n\n\t\t\tfrappe.db.set_value('Item', iterator.item_code, {\n\t\t\t\tpo_amount: iterator.rate,\n\t\t\t\ttrading_item_flp: iterator.rate + processing_amount\n\t\t\t}).then(r => {\n\t\t\t\tlet doc = r.message;\n\t\t\t\tconsole.log(doc);\n\t\t\t})\n\t\t}\n\n\n\n\t},\n\t onload(frm){\n        if(frm.doc.purchase_order) {\n            frappe.db.get_value('Purchase Order',{\"name\":frm.doc.purchase_order}, 'payment_terms_template', (r)=>{\n                \n                    frm.set_value('payment_terms_template', r.payment_terms_template)\n            })\n        }\n\t }\n            \n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2023-05-02 13:27:31.669348",
  "module": null,
  "name": "Sales Invoice-Form",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n    // frm.doc.payment_terms_template =  \"20% Advance and balance 80% 60 days after the BL.\";\n\t}, \n\t onload(frm){\n        if(frm.doc.sales_order) {\n            frappe.db.get_value('Sales Order',{\"name\":frm.doc.sales_order}, 'payment_terms_template', (r)=>{\n                \n                    frm.set_value('payment_terms_template', r.payment_terms_template)\n            })\n        }\n\t }\n                 \n})\n\nfrappe.ui.form.on('Sales Invoice Item', \"item_code\", function(frm, cdt, cdn) {\n    // locals[cdt][cdn]['product']\n\n  \n\tvar ItemGroup = 0.00\n\tvar Item = 0.00\n\tvar Customer = 0.00\n\tvar TotalCost = 0.00\n\tvar RMC = 0.00\n\n\tvar Totalper = 0.00\n\tvar TotalValue = 0.00\n\n\n\t// getting percentage item\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'Item',\n\t\t\t'filters': {\n\t\t\t\t'name': locals[cdt][cdn]['item_code']\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'percentage',\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.percentage) {\n\t\t\t\t\tItem = r.message.percentage\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// getting percentage item item_group\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'Item Group',\n\t\t\t'filters': {\n\t\t\t\t'name': locals[cdt][cdn]['item_group']\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'percentage',\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.percentage) {\n\t\t\t\t\tItemGroup = r.message.percentage\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// getting percentage item Customer\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'Customer',\n\t\t\t'filters': {\n\t\t\t\t'name': frm.doc.party_name\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'percentage',\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.percentage) {\n\t\t\t\t\tCustomer = r.message.percentage\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// getting percentage item Bom\n\tfrappe.call({\n\t\tmethod: 'frappe.client.get_value',\n\t\targs: {\n\t\t\t'doctype': 'BOM',\n\t\t\t'filters': {\n\t\t\t\t'item': locals[cdt][cdn]['item_code'],\n\t\t\t\t\"is_default\": 1\n\t\t\t},\n\t\t\t'fieldname': [\n\t\t\t\t'raw_material_cost',\n\t\t\t\t'total_cost',\n                'electricity_per_unit',\n                'total_overheads',\n                \"quantity\"\n\t\t\t]\n\t\t},\n\t\tasync: false,\n\t\tcallback: function(r) {\n\t\t\tif (!r.exc) {\n\t\t\t\t// code snippet\n\t\t\t\tif (r.message.raw_material_cost) {\n\t\t\t\t\tRMC = r.message.raw_material_cost / r.message.quantity\n\t\t\t\t\tTotalCost = RMC + r.message.electricity_per_unit + r.message.total_overheads\n\n\t\t\t\t}else \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\t\t\t\tmethod: 'frappe.client.get_value',\n\t\t\t\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\t\t\t\t'doctype': 'Item',\n\t\t\t\t\t\t\t\t\t\t\t\t'filters': {\n\t\t\t\t\t\t\t\t\t\t\t\t\t'name': locals[cdt][cdn]['item_code']\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t'fieldname': [\n\t\t\t\t\t\t\t\t\t\t\t\t\t'trading_item_flp',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'po_amount'\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tasync: false,\n\t\t\t\t\t\t\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// code snippet\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (r.message.trading_item_flp) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTotalCost = r.message.trading_item_flp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRMC = r.message.po_amount\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t});\n\n\n\n\tif (isNaN(ItemGroup) == false && isNaN(Item) == false && isNaN(Customer) == false && isNaN(TotalCost) == false && isNaN(RMC) == false) {\n\t\tTotalper = ItemGroup + Item + Customer\n\n\t\tTotalValue = (Totalper * TotalCost) / 100\n\n\t\tlocals[cdt][cdn]['rmc_'] = RMC.toFixed(2);\n\t\tlocals[cdt][cdn]['flp_'] = TotalCost.toFixed(2);\n\t\tlocals[cdt][cdn]['ufp_'] = (TotalCost + TotalValue).toFixed(2);\n\n\n\n\t} else {\n\n\n\t}\n\n\n\n\n// \tconsole.log(`______________`)\n// \t// console.log(ItemGroup)\n// \tconsole.log(`ItemGroup : ${ItemGroup}  `)\n// \tconsole.log(`Item : ${Item}  `)\n// \tconsole.log(`Customer : ${Customer}  `)\n// \tconsole.log(`TotalCost : ${TotalCost}  `)\n// \tconsole.log(`RMC : ${RMC}  `)\n// \tconsole.log(`Totalper : ${Totalper}  `)\n// \tconsole.log(`TotalValue : ${TotalValue}  `)\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2023-06-12 20:34:59.621897",
  "module": null,
  "name": "Payment Entry-Form",
  "script": "frappe.ui.form.on('Payment Entry', {\n\trefresh(frm) {\n\n\t frm.doc.references.forEach(i=>{\n\t     if (i.reference_doctype == \"Sales Invoice\"){\n            frappe.db.get_value(\"Sales Invoice\", {\"name\": i.reference_name}, [\"rounded_total\"], (r)=>{\n              i.total_amount = r.rounded_total\n              frm.refresh_fields(\"references\");\n              \n          })\n\t     }\n\t      if (i.reference_doctype == \"Sales Order\"){\n            frappe.db.get_value(\"Sales Order\", {\"name\": i.reference_name}, [\"rounded_total\"], (n)=>{\n              i.total_amount = n.rounded_total\n              frm.refresh_fields(\"references\");\n              \n          })\n\t     }\n\t     })\n      \n\t}\n})\n\n//------------------------------------",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2024-04-03 17:02:24.726545",
  "module": null,
  "name": "Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n\t    //\n    }\n})\n\nfrappe.ui.form.on('Stock Entry Detail', {\n\titem_code: function(frm, cdt, cdn) {\n        var child = locals[cdt][cdn];\n        if (child.item_code) {\n            var branch = frm.doc.branch;\n            frappe.model.set_value(cdt, cdn, 'branch', branch);\n        }\n    },\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2024-09-09 11:55:13.201382",
  "module": null,
  "name": "Address",
  "script": "frappe.ui.form.on('Address', {\n\tonload(frm) {\n\t\tfrm.set_df_property(\"address_line2\", \"reqd\", 1);\n\t\tfrm.set_df_property(\"state\", \"reqd\", 1);\n\t\tfrm.set_df_property(\"pincode\", \"reqd\", 1);\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contact",
  "enabled": 1,
  "modified": "2024-09-09 11:57:51.618008",
  "module": null,
  "name": "Contact",
  "script": "frappe.ui.form.on('Contact', {\n\tonload(frm) {\n\t\tfrm.set_df_property(\"designation\", \"reqd\", 1);\n\t\tfrm.set_df_property(\"email_ids\", \"reqd\", 1);\n\t\tfrm.set_df_property(\"phone_nos\", \"reqd\", 1);\n\t}\n})",
  "view": "Form"
 }
]